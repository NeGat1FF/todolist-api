// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/NeGat1FF/todolist-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepositoryInterface is an autogenerated mock type for the TaskRepositoryInterface type
type TaskRepositoryInterface struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: ctx, task
func (_m *TaskRepositoryInterface) AddTask(ctx context.Context, task models.Task) (models.Task, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Task) (models.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Task) models.Task); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, task_id, user_id
func (_m *TaskRepositoryInterface) DeleteTask(ctx context.Context, task_id int, user_id int) error {
	ret := _m.Called(ctx, task_id, user_id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, task_id, user_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskByID provides a mock function with given fields: ctx, task_id
func (_m *TaskRepositoryInterface) GetTaskByID(ctx context.Context, task_id int) (models.Task, error) {
	ret := _m.Called(ctx, task_id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Task, error)); ok {
		return rf(ctx, task_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Task); ok {
		r0 = rf(ctx, task_id)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, task_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: ctx, user_id, page, limit
func (_m *TaskRepositoryInterface) GetTasks(ctx context.Context, user_id int, page int, limit int) ([]models.Task, error) {
	ret := _m.Called(ctx, user_id, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]models.Task, error)); ok {
		return rf(ctx, user_id, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []models.Task); ok {
		r0 = rf(ctx, user_id, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, user_id, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, task, task_id, user_id
func (_m *TaskRepositoryInterface) UpdateTask(ctx context.Context, task models.Task, task_id int, user_id int) (models.Task, error) {
	ret := _m.Called(ctx, task, task_id, user_id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Task, int, int) (models.Task, error)); ok {
		return rf(ctx, task, task_id, user_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Task, int, int) models.Task); ok {
		r0 = rf(ctx, task, task_id, user_id)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Task, int, int) error); ok {
		r1 = rf(ctx, task, task_id, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepositoryInterface creates a new instance of TaskRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepositoryInterface {
	mock := &TaskRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
